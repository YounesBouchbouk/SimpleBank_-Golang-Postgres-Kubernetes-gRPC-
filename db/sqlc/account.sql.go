// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: account.sql

package db

import (
	"context"
)

const deleteAccounts = `-- name: DeleteAccounts :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccounts(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccounts, id)
	return err
}

const getAccounts = `-- name: GetAccounts :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccounts(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccounts, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, balance, currency, created_at FROM accounts
ORDER BY name
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE accounts
  set balance = $2
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor, arg.ID, arg.Balance)
	return err
}

const accounts = `-- name: accounts :one
INSERT INTO accounts (
  owner, balance , currency
) VALUES (
  $1, $2 , $3
)RETURNING id, owner, balance, currency, created_at
`

type accountsParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) accounts(ctx context.Context, arg accountsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, accounts, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
